global:
  auth:
    backend:
      enabled: true
      existingSecret: ''
      value: ''
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - disabled: false
        integrity: >-
          sha512-G9SHCsXN3eLgRRaP3v8eNXnfmnqStQaZrLUiTRgCH9W/WGHk3Q//V7I8HjDzpPchA7g5yrR5Qhh50MCd7oiFKw==
        package: '@janus-idp/backstage-plugin-orchestrator-backend-dynamic@1.8.2'
        pluginConfig:
          orchestrator:
            dataIndexService:
              url: '${WORKFLOWS_ROUTE}'
      - disabled: false
        integrity: >-
          sha512-yYKLVfEqYWbQAcaB3LzNiro6Hs2f5lfofOoqZwKCkSXZJBu7VuywS5seruR6VdUyWLrMMR9TfJWgLIcPScpOfA==
        package: '@janus-idp/backstage-plugin-orchestrator@1.11.2'
        pluginConfig:
          dynamicPlugins:
            frontend:
              janus-idp.backstage-plugin-orchestrator:
                appIcons:
                  - importName: OrchestratorIcon
                    module: OrchestratorPlugin
                    name: orchestratorIcon
                dynamicRoutes:
                  - importName: OrchestratorPage
                    menuItem:
                      icon: orchestratorIcon
                      text: Orchestrator
                    module: OrchestratorPlugin
                    path: /orchestrator
  host: ''
route:
  annotations: {}
  enabled: true
  host: '{{ .Values.global.host }}'
  path: /
  tls:
    caCertificate: ''
    certificate: ''
    destinationCACertificate: ''
    enabled: true
    insecureEdgeTerminationPolicy: Redirect
    key: ''
    termination: edge
  wildcardPolicy: None
upstream:
  backstage:
    appConfig:
      app:
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
      integrations:
        github:
          - host: github.com
            token: "${GITHUB_TOKEN}"
      catalog:
        rules:
          - allow:
              [
                Component,
                System,
                Group,
                Resource,
                Location,
                Template,
                API,
                User,
                Domain,
              ]
        locations:
          - type: url
            target: https://github.com/janus-idp/backstage-showcase/blob/main/catalog-entities/all.yaml
          - type: url
            target: https://github.com/redhat-developer/red-hat-developer-hub-software-templates/blob/main/templates.yaml
          - type: url
            target: https://github.com/janus-idp/backstage-plugins/blob/%40janus-idp/shared-react%402.6.1/plugins/notifications-backend/users.yaml
      auth:
        providers:
          guest: {}
      backend:
        auth:
          dangerouslyDisableDefaultAuthPolicy: true
          keys:
            - secret: '${BACKEND_SECRET}'
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
        cors:
          origin: 'https://{{- include "janus-idp.hostname" . }}'
        csp:
          connect-src:
            - '''self'''
            - 'blob:'
            - 'http:'
            - 'https:'
            - 'data:'
            - 'https://cdn.jsdelivr.net'
          frame-ancestors:
            - '{{ .Values.global.host }}'
          script-src:
            - '''self'''
            - '''unsafe-eval'''
            - '''unsafe-inline'''
            - 'https://cdn.jsdelivr.net'
          script-src-elem:
            - '''self'''
            - '''unsafe-eval'''
            - '''unsafe-inline'''
            - 'https://cdn.jsdelivr.net'
          worker-src:
            - '''self'''
            - 'blob:'
            - 'data:'
        database:
          connection:
            password: '${POSTGRESQL_ADMIN_PASSWORD}'
            user: postgres
    args:
      - '--config'
      - dynamic-plugins-root/app-config.dynamic-plugins.yaml
    command: []
    extraEnvVars:
      - name: BACKEND_SECRET
        valueFrom:
          secretKeyRef:
            key: backend-secret
            name: '{{ include "janus-idp.backend-secret-name" $ }}'
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: '{{- include "janus-idp.postgresql.secretName" . }}'
    extraVolumeMounts:
      - mountPath: /opt/app-root/src/dynamic-plugins-root
        name: dynamic-plugins-root
    extraVolumes:
      - ephemeral:
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 2Gi
        name: dynamic-plugins-root
      - configMap:
          defaultMode: 420
          name: dynamic-plugins
          optional: true
        name: dynamic-plugins
      - name: dynamic-plugins-npmrc
        secret:
          defaultMode: 420
          optional: true
          secretName: dynamic-plugins-npmrc
    image:
      registry: quay.io
      repository: janus-idp/backstage-showcase
      tag: next
    initContainers:
      - command:
          - ./install-dynamic-plugins.sh
          - /dynamic-plugins-root
        env:
          - name: NPM_CONFIG_USERCONFIG
            value: /opt/app-root/src/.npmrc.dynamic-plugins
        image: '{{ include "backstage.image" . }}'
        imagePullPolicy: Always
        name: install-dynamic-plugins
        volumeMounts:
          - mountPath: /dynamic-plugins-root
            name: dynamic-plugins-root
          - mountPath: /opt/app-root/src/dynamic-plugins.yaml
            name: dynamic-plugins
            readOnly: true
            subPath: dynamic-plugins.yaml
          - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
            name: dynamic-plugins-npmrc
            readOnly: true
            subPath: .npmrc
        workingDir: /opt/app-root/src
    installDir: /opt/app-root/src
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthcheck
        port: 7007
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    podAnnotations:
      checksum/dynamic-plugins: >-
        {{- include "common.tplvalues.render" ( dict "value"
        .Values.global.dynamic "context" $) | sha256sum }}
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthcheck
        port: 7007
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 2
      timeoutSeconds: 2
  ingress:
    host: '{{ .Values.global.host }}'
  nameOverride: backstage
  postgresql:
    auth:
      secretKeys:
        adminPasswordKey: postgres-password
        userPasswordKey: password
    enabled: true
    image:
      registry: quay.io
      repository: fedora/postgresql-15
      tag: latest
    postgresqlDataDir: /var/lib/pgsql/data/userdata
    primary:
      containerSecurityContext:
        enabled: false
      extraEnvVars:
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: '{{- include "postgresql.v1.secretName" . }}'
      persistence:
        enabled: true
        mountPath: /var/lib/pgsql/data
        size: 1Gi
      podSecurityContext:
        enabled: false
